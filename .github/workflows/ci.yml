name: Continuous Integration
on:
  - pull_request
  - push
jobs:
  # Build and test the commit
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          # Bad LLVM version in OPAM
          # - macos-latest
          # Can't build on Windows because Cygwin only supports LLVM 8
          # - windows-latest
    runs-on: ${{ matrix.os }}
    name: Build and Test on ${{ matrix.os }}
    steps:
      # Check out the code
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0

      # Setup OCaml
      - name: Install OCaml
        uses: avsm/setup-ocaml@v1
        with:
          ocaml-version: 4.11.1

      # Build the compiler
      - name: Pin Package
        run: opam pin add nile.dev . --no-action
      - name: Install System Dependencies
        run: opam depext nile --yes
      - name: Install Package Dependencies
        run: opam install . --deps-only
      - name: Build Nile
        run: opam exec -- dune build bin

      # Run unit and integration tests
      - name: Run Unit Tests
        env:
          BISECT_FILE: _build/default/_coverage/unit/coverage
        run: |
          opam exec -- dune runtest test/unit \
            --instrument-with bisect_ppx \
            --force
      - name: Run Integration Tests
        env:
          BISECT_FILE: _build/default/_coverage/unit/coverage
        run: |
          opam exec -- dune runtest test/integration \
            --instrument-with bisect_ppx \
            --force

  # Generate the static documentation site
  generate-docs:
    name: Generate GitHub Pages Site
    if: github.ref == 'refs/heads/master'
    runs-on:
      - ubuntu-latest
    needs:
      - build-and-test
    steps:
      - name: Echo working dir
        run: pwd
      - name: List working dir
        run: ls

      # Setup Hugo
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: latest
          extended: true
      - name: Clean Public Directory
        run: rm -rf ${{ github.workspace }}/doc/public

      # Setup Node
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Cache Node dependencies
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install Node Dependencies
        run: npm ci

      # Generate the static site
      - name: Generate Static Site
        run: |
          hugo \
            -s ${{ github.workspace }}/doc \
            -b https://watersofoblivion.github.io/nile \
            -t docsy \
            --minify \
            --log

      # Build the code documentation
      - name: Build ODoc
        run: opam exec -- dune build @doc
      - name: Copy ODoc to Static Site
        run: cp -r ./_build/default/_doc/_html/* ./doc/public/static/odoc/

      # Generate test coverage reports
      - name: Generate Unit Test Coverage Report
        run: |
          opam exec -- bisect-ppx-report html \
            --title "Nile Unit Test Coverage Report" \
            --coverage-path _build/default/test/unit \
            -o ./doc/public/static/coverage/unit
      - name: Generate Integration Test Coverage Report
        run: |
          opam exec -- bisect-ppx-report html \
            --title "Nile Integration Test Coverage Report" \
            --coverage-path _build/default/test/integration \
            -o ./doc/public/static/coverage/integration

      # Deploy the site to GitHub Pages
      - name: Deploy Static Site to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          public_dir: ./doc/public

  # Create a tagged release
  create-tagged-release:
    needs:
      - build-and-test
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          # Bad LLVM version in OPAM
          # - macos-latest
          # Can't build on Windows because Cygwin only supports LLVM 8
          # - windows-latest
    name: Create Tagged Release on ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/heads/v')
    runs-on: ${{ matrix.os }}
    steps:
      # "Install" the package
      - name: Install
        run: opam exec -- dune build @install

      # Release the executable
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          relase_tag: ${{ github.ref }}
          release_name: ${{ github.ref }}
      - name: Upload Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: _build/install/default/bin/nile
          asset_name: nile
          asset_content_type: application/octet-stream
